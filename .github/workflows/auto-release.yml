name: Auto Release

on:
  push:
    branches: [release]

jobs:
  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun test

      - name: Build project
        run: bun run build

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine release type from commit messages
        id: release_type
        run: |
          # 获取自上次 release 以来的提交信息
          COMMITS=$(git log --pretty=format:"%s" $(git describe --tags --abbrev=0)..HEAD 2>/dev/null || git log --pretty=format:"%s")
          echo "Commits since last release:"
          echo "$COMMITS"

          # 检查提交类型确定发布类型
          if echo "$COMMITS" | grep -qE "BREAKING CHANGE|feat!|fix!"; then
            echo "release_type=major" >> $GITHUB_OUTPUT
            echo "发现破坏性更改，执行 major 版本发布"
          elif echo "$COMMITS" | grep -q "^feat"; then
            echo "release_type=minor" >> $GITHUB_OUTPUT
            echo "发现新功能，执行 minor 版本发布"
          else
            echo "release_type=patch" >> $GITHUB_OUTPUT
            echo "执行 patch 版本发布"
          fi

      - name: Release
        run: bun run release:${{ steps.release_type.outputs.release_type }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Merge back to main
        run: |
          git checkout main
          git merge release --no-ff -m "chore: merge release branch back to main"
          git push origin main
